import_code("/root/json.src":"../src/json.src")
import_code("/":"./fixtures/mocks.src")
import_code("/":"./utils/index.src")

description("Strinify", function
  test("object", function
    json = JSON.stringify(myTestObject)

    return typeof(json) == "string"
  end function)

  test("object with toJson", function
    json = JSON.stringify(myTestMapWithToJson)

    return json == myTestMapWithToJson.toJson
  end function)

  test("list", function
    json = JSON.stringify(myTestList)

    return typeof(json) == "string"
  end function)

  test("string", function
    json = JSON.stringify("test")

    return typeof(json) == "string"
  end function)

  test("number", function
    json = JSON.stringify(12345)

    return typeof(json) == "string"
  end function)
end function)

description("Parse", function
  test("object", function
    json = JSON.stringify(myTestObject)

    return typeof(JSON.parse(json)) == "map"
  end function)

  test("list", function
    json = JSON.stringify(myTestList)

    return typeof(JSON.parse(json)) == "list"
  end function)

  test("string", function
    json = JSON.stringify("test")

    return typeof(JSON.parse(json)) == "string"
  end function)

  test("number", function
    json = JSON.stringify(12345)

    return typeof(JSON.parse(json)) == "number"
  end function)

  test("invalid json", function
    json = "{""test"": 123, ""x"": [""bar""}"

    return typeof(JSON.parse(json)) == "null"
  end function)
end function)

description("Use cases", function
  test("Parse stringified object and compare to original map", function
    json = JSON.stringify(simpleTestObject)
    parsedObj = JSON.parse(json)

    return simpleTestObject == parsedObj
  end function)

  test("Write/Read json file", function
    rshell = get_shell("root", "test")
    json = JSON.stringify(myTestObject)

    rshell.host_computer.touch("/root", "file.json")
    testFile = rshell.host_computer.File("/root/file.json")

    testFile.set_content(json)

    parsedObj = JSON.parse(testFile.get_content)

    return typeof(parsedObj) == "map"
  end function)
end function)